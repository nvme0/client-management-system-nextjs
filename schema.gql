# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CalendarEvent {
  allDay: Boolean!
  client: Client
  createdAt: DateTime!
  end: DateTime!
  id: ID!
  notes: String
  resource: String
  service: Service
  start: DateTime!
  title: String!
  updatedAt: DateTime!
}

input CalendarEventInput {
  allDay: Boolean!
  client: ClientInput
  createdAt: DateTime!
  end: DateTime!
  id: ID!
  notes: String
  resource: String
  service: ServiceInput
  start: DateTime!
  title: String!
  updatedAt: DateTime!
}

type Client {
  address: String
  createdAt: DateTime!
  email: String
  firstName: String!
  id: ID!
  installments: [Installment!]
  lastName: String
  notes: String
  phone: String
  programs: [ProgramToClient!]
  updatedAt: DateTime!
}

input ClientInput {
  address: String
  createdAt: DateTime!
  email: String
  firstName: String!
  id: ID!
  installments: [InstallmentInput!] = []
  lastName: String
  notes: String
  phone: String
  programs: [ProgramToClientInput!] = []
  updatedAt: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Installment {
  amount: String!
  currency: String!
  date: DateTime!
  notes: String
}

input InstallmentInput {
  amount: String!
  currency: String!
  date: DateTime!
  notes: String
}

type Mutation {
  deleteCalendarEvent(deletedAt: DateTime!, id: String!): Boolean!
  deleteClient(deletedAt: DateTime!, id: String!): Boolean!
  deleteProgram(deletedAt: DateTime!, id: String!): Boolean!
  deleteService(deletedAt: DateTime!, id: String!): Boolean!
  login(email: String!, password: String!): MutationResponse!
  logout: Boolean!
  register(email: String!, password: String!): MutationResponse!
  upsertCalendarEvent(calendarEventInput: CalendarEventInput!): CalendarEvent
  upsertClient(clientInput: ClientInput!): Client
  upsertProgram(programInput: ProgramInput!): Program
  upsertService(serviceInput: ServiceInput!): Service
}

type MutationResponse {
  errors: [YupError]!
  payload: String
  status: Int!
}

type Program {
  createdAt: DateTime!
  id: ID!
  name: String!
  notes: String
  services: [ServiceToProgram!]
  updatedAt: DateTime!
}

input ProgramInput {
  createdAt: DateTime!
  id: ID!
  name: String!
  notes: String
  services: [ServiceToProgramInput!] = []
  updatedAt: DateTime!
}

type ProgramToClient {
  createdAt: DateTime!
  id: ID!
  name: String!
  notes: String
  services: [ServiceToProgramToClient!]
  updatedAt: DateTime!
}

input ProgramToClientInput {
  createdAt: DateTime!
  id: ID!
  name: String!
  notes: String
  services: [ServiceToProgramToClientInput!] = []
  updatedAt: DateTime!
}

type Query {
  getCalendarEvents: [CalendarEvent!]!
  getClients: [Client!]!
  getPrograms: [Program!]!
  getServices: [Service!]!
  me: User!
}

type Service {
  createdAt: DateTime!
  duration: String
  expires: DateTime
  id: ID!
  name: String!
  notes: String
  updatedAt: DateTime!
}

input ServiceInput {
  createdAt: DateTime!
  duration: String
  expires: DateTime
  id: ID!
  name: String!
  notes: String
  updatedAt: DateTime!
}

type ServiceToProgram {
  createdAt: DateTime!
  quantity: Int!
  service: Service!
  updatedAt: DateTime!
}

input ServiceToProgramInput {
  createdAt: DateTime!
  quantity: Int!
  service: ServiceInput!
  updatedAt: DateTime!
}

type ServiceToProgramToClient {
  booked: Int!
  createdAt: DateTime!
  quantity: Int!
  service: Service!
  updatedAt: DateTime!
  used: Int!
}

input ServiceToProgramToClientInput {
  booked: Int!
  createdAt: DateTime!
  quantity: Int!
  service: ServiceInput!
  updatedAt: DateTime!
  used: Int!
}

type User {
  confirmed: Boolean!
  createdAt: DateTime!
  email: String!
  id: ID!
  updatedAt: DateTime!
}

type YupError {
  message: String!
  path: String!
}
